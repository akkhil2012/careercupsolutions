package com.amazon.binaryTree;

import java.util.Stack;


class BinaryTree {
	Node root;
	Node temp;

	public BinaryTree() {

	}

	public BinaryTree(Node root) {
		this.root = null;
	}

	public void insert(int nData) { // Using Recursion // detect duplicate in
									// Binary Tree
		Node newNode = new Node(nData);
		if (root == null) {
			root = newNode;
			// return root.nData;
			// return root.nData;
			return;
		} else {
			Node current = root;
			Node parent;
			while (true) {
				parent = current;
				if (newNode.nData < current.nData)// go left
				{
					current = current.leftNode;
					if (current == null) {
						parent.leftNode = newNode;
						return;
					}
				} else {
					current = current.rightNode;
					if (current == null) {
						parent.rightNode = newNode;
						return;
					}
				}
			}

			/*
			 * Node current = root; Node parent; while (true) { parent =
			 * current; if (newNode.nData < current.nData){ current =
			 * current.leftNode; if(current==null){ parent.leftNode = newNode; }
			 * } else { current = current.rightNode; if(current == null){
			 * parent.rightNode = newNode; } } }
			 */
		}
	}

	/*
	 * public void displayTree(Node node){ Node current = node; if
	 * (current!=null) { displayTree(current.leftNode);
	 * displayTree(current.rightNode); System.out.println("    "+current.nData);
	 * } }
	 */
	
	class Node {
		int nData;
		Node leftNode;
		Node rightNode;

		// boolean isLeftchild;
		public Node(int nData) {
			this.nData = nData;
		}

		public Node() {

		}

	}


	public void displayTree() {
		Stack globalStack = new Stack();
		globalStack.push(root);
		int emptyLeaf = 32;
		boolean isRowEmpty = false;
		System.out
				.println("****......................................................****");
		while (isRowEmpty == false) {

			Stack localStack = new Stack();
			isRowEmpty = true;
			for (int j = 0; j < emptyLeaf; j++)
				System.out.print(' ');
			while (globalStack.isEmpty() == false) {
				Node temp = (Node) globalStack.pop();
				if (temp != null) {
					System.out.print(" ** " + temp.nData);
					localStack.push(temp.leftNode);
					localStack.push(temp.rightNode);
					if (temp.leftNode != null || temp.rightNode != null)
						isRowEmpty = false;
				} else {
					System.out.print("--");
					localStack.push(null);
					localStack.push(null);
				}
				for (int j = 0; j < emptyLeaf * 2 - 2; j++)
					System.out.print(' ');
			}
			System.out.println();
			emptyLeaf /= 2;
			while (localStack.isEmpty() == false)
				globalStack.push(localStack.pop());
		}
		System.out
				.println("****......................................................****");
	}
}

	
public class BinaryTreeQuestions {

	public static void main(String args[]){
		
		BinaryTree binaryTree = new BinaryTree();
		
		binaryTree.insert(1);
		binaryTree.insert(2);
		binaryTree.insert(3);
		
		binaryTree.displayTree();
		BinaryTree secondTree = new BinaryTree();
		secondTree.insert(4);
		secondTree.insert(5);
		secondTree.insert(7);
		
		secondTree.displayTree();
		
		booleaan res = checkIfSameIntegers(binaryTree.root,secondTree.root);
	}
	
}
